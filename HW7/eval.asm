; Name: YUEN HAN CHAN


; Main
; Do not edit this function!

.orig x3000

        LD R6, STACK    ; Initialize the stack

        LEA R0, STRING  ; R0 = &str[0]
        ADD R1, R0, 0

SL_LOOP LDR R2, R1, 0   ; \ R1 = strlen(str)
        BRz SL_END      ; |
        ADD R1, R1, 1   ; |
        BR SL_LOOP      ; |
SL_END  NOT R2, R0      ; |
        ADD R2, R2, 1   ; |
        ADD R1, R1, R2  ; /

        ADD R6, R6, -2  ; \ R0 = eval(str, len)
        STR R0, R6, 0   ; |     arg1 = String Position
        STR R1, R6, 1   ; |     arg2 = length
        LD R2, EVALPTR  ; |
        JSRR R2         ; |
        LDR R0, R6, 0   ; |
        ADD R6, R6, 3   ; /

        ST R0, ANS
        HALT

STACK   .fill xf000
ANS     .fill -1
EVALPTR .fill EVAL
STRING  .stringz "1*2+3*4+5"
        .blkw 200

PLUS	.fill -43	;-'+'
MULTPLY .fill -42	;-'*'
ZERO	.fill -48	;-'0'

	; Write your function here
EVAL	ADD R6, R6, -3	;ALLOCATE SPACE FOR RV,RA, OFP
	STR R7, R6, 1	;STORE RA
	STR R5, R6, 0	;STORE OFP
	ADD R6, R6, -1	;ALLOCATE SPACE FOR 1ST TEMP
	AND R7, R7, 0	;R7=0=i
	STR R7, R6, 0	;I=0 INTO STACK
	ADD R5, R6, 0	;COPY SP TO FP
	ADD R6, R6, -5	;ALLOCATE SPACE FOR R0-R2 FOR SAVE KEEPING, LEFT, RIGHT
	STR R0, R6, 0
	STR R1, R6, 1
	STR R2, R6, 2
	STR R3, R6, 3	;R3=RIGHT	
	STR R4, R6, 4	;R4=LEFT R0-R2 ARE NOW SAFE TO USE
FIRSTWHILE
	LDR R2, R5, 5	;R2=LEN
	NOT R2, R2	;R2=-LEN
	ADD R2, R2, 1
	ADD R2, R2, R7	;R2=I-LEN
	BRZP OUTFIRSTWHILE

	LDR R0, R5, 0	;R0=i
	LDR R1, R5, 4	;R1=STR
	LDR R3, R5, 4	;R3=STR
	LDR R7, R5, 0	;R7=i
	ADD R3, R3, R7	;R3=ADDRESS(STR+i)
	LDR R3, R3, 0	;R3=*Str+i
	LD  R4, PLUS	;R4=-"+"
	ADD R3, R3, R4	;R3=*STR+i - '+'
	BRNP OUTFIRSTIF

	ADD R6, R6, -2	;ALLOCATE SPACE FOR I AND STR
	STR R0, R6, 1	;STORE I INTO STACK
	STR R1, R6, 0	;STORE STR INTO STACK
	JSR EVAL

	LDR R4, R6, 0	;R4 = EVAL(STR,I) = LEFT
	STR R4, R5, -1	;PUT LEFT INTO STACK(REPLACE)
	ADD R6, R5, -7	;MOVE R6 BACK TO STARTING POINT
	LDR R1, R5, 5	;R1=LEN
	LDR R2, R5, 0	;R2=I
	NOT R2, R2	;R2=-I
	ADD R2, R2, 1	
	ADD R1, R1, R2	;R1=LEN-I
	ADD R1, R1, -1	;R1=LEN-I-1
	STR R1, R5, -6	;STORE(LEN-I-1) INTO STACK
	LDR R1, R5, 4	;R1=STR
	LDR R2, R5, 0	;R2=I
	ADD R1, R1, R2	;R1=STR+I
	ADD R1, R1, 1	;R1=STR+I+1
	STR R1, R6, 0	;PUT R1 INTO STACK
	JSR EVAL

	LDR R3, R6, 0	;PUT EVAL(STR+I+1,LEN-I-1) INTO R3 = RIGHT
	STR R3, R5, -2	;PUT RIGHT INTO STACK(REPLACE)
	LDR R3, R5, -2	;R3=RIGHT
	LDR R4, R5, -1	;R4=LEFT
	ADD R0, R3, R4	;R0=LEFT+RIGHT
	BR RETURN1
	BR OUTFIRSTIF

OUTFIRSTIF
	ADD R7, R7, 1	;i++
	STR R7, R5, 0	;PUT i INTO THE STACK(REPLACE)
	BR FIRSTWHILE

OUTSECONDIF
	ADD R7, R7, 1	;i++
	STR R7, R5, 0	;PUT i INTO THE STACK(REPLACE)
	BR SECONDWHILE

OUTFIRSTWHILE
	AND R2, R2, 0	;R2=0
	STR R2, R5, 0	;PUT i=0 INTO THE STACK(REPLACE)

SECONDWHILE
	LDR R1, R5, 0	;R1=i
	LDR R2, R5, 5	;R2=LEN
	NOT R2, R2	;R2=-LEN
	ADD R2, R2, 1
	ADD R2, R2, R1	;R2=I-LEN
	BRZP OUTSECONDWHILE

	LDR R0, R5, 0	;R0=i
	LDR R1, R5, 4	;R1=STR
	LDR R3, R5, 4	;R3=STR
	LDR R7, R5, 0	;R7=i
	ADD R3, R3, R7	;R3=ADDRESS(STR+i)
	LDR R3, R3, 0	;R3=*Str+i
	LD  R4, MULTPLY	;R4=-"*"
	ADD R3, R3, R4	;R3=*STR+i - '*'
	BRNP OUTSECONDIF

	ADD R6, R6, -2	;ALLOCATE SPACE FOR I AND STR
	STR R0, R6, 1	;STORE I INTO STACK
	STR R1, R6, 0	;STORE STR INTO STACK
	JSR EVAL

	LDR R4, R6, 0	;R4 = EVAL(STR,I) = LEFT	
	STR R4, R5, -1	;PUT LEFT INTO STACK(REPLACE)
	ADD R6, R5, -7	;MOVE R6 BACK TO STARTING POINT
	LDR R1, R5, 5	;R1=LEN
	LDR R2, R5, 0	;R2=I
	NOT R2, R2	;R2=-I
	ADD R2, R2, 1	
	ADD R1, R1, R2	;R1=LEN-I
	ADD R1, R1, -1	;R1=LEN-I-1
	STR R1, R5, -6	;STORE(LEN-I-1) INTO STACK
	LDR R1, R5, 4	;R1=STR
	LDR R2, R5, 0	;R2=I
	ADD R1, R1, R2	;R1=STR+I
	ADD R1, R1, 1	;R1=STR+I+1
	STR R1, R6, 0	;PUT R1 INTO STACK
	JSR EVAL

	LDR R3, R6, 0	;PUT EVAL(STR+I+1,LEN-I-1) INTO R3 = RIGHT
	STR R3, R5, -2	;PUT RIGHT INTO STACK(REPLACE)
	AND R1, R1, 0	;R1=0
	ADD R1, R1, R4	;R1=LEFT
	AND R2, R2, 0	;R2=0

COUNT	ADD R2, R2, R3
	ADD R1, R1, -1
	BRNP COUNT
	AND R0, R0, 0	;R0=0
	ADD R0, R0, R2	;R0=LEFT*RIGHT
	BR RETURN1
	BR OUTSECONDIF


RETURN1	STR R0, R5, 3	;STORE R0 INTO RV
	LDR R7, R5, 2	;RESTORE RA
    	ADD R6, R5, 3   ;Point SP at the RV
	LDR R0, R5, -5
	LDR R1, R5, -4
	LDR R2, R5, -3
	LDR R3, R5, -2
	LDR R4, R5, -1
    	LDR R5, R5, 1   ;Restore old FP
    	RET             ;Return

OUTSECONDWHILE
RETURN2	LDR R0, R5, 4	;R0=STR
	LDR R0, R0, 0	;R0=*STR
	LD  R1, ZERO	;R1=-'0'
	ADD R0, R0, R1	;R0=*STR-'0'
	BR RETURN1

.end
